// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Define the datasource for PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define user roles enum
enum UserRole {
  ADMIN
  SUPERVISOR
  USER
}

// Define permissions enum
enum Permission {
  // User management
  CREATE_USER
  READ_USER
  UPDATE_USER
  DELETE_USER
  
  // Event management
  CREATE_EVENT
  READ_EVENT
  UPDATE_EVENT
  DELETE_EVENT
  
  // Flight schedule management
  CREATE_FLIGHT_SCHEDULE
  READ_FLIGHT_SCHEDULE
  UPDATE_FLIGHT_SCHEDULE
  DELETE_FLIGHT_SCHEDULE
  UPLOAD_FLIGHT_SCHEDULE
  
  // Transport report management
  CREATE_TRANSPORT_REPORT
  READ_TRANSPORT_REPORT
  UPDATE_TRANSPORT_REPORT
  DELETE_TRANSPORT_REPORT
  
  // Real-time status management
  CREATE_REAL_TIME_STATUS
  READ_REAL_TIME_STATUS
  UPDATE_REAL_TIME_STATUS
  DELETE_REAL_TIME_STATUS
  
  // Document management
  CREATE_DOCUMENT
  READ_DOCUMENT
  UPDATE_DOCUMENT
  DELETE_DOCUMENT
  UPLOAD_DOCUMENT
  
  // System administration
  MANAGE_ROLES
  MANAGE_PERMISSIONS
  VIEW_SYSTEM_STATS
}

// Define the users model
model User {
  user_id      Int       @id @default(autoincrement())
  email        String    @unique @db.VarChar(255)
  password_hash String   @db.VarChar(255)
  name         String    @db.VarChar(100)
  surname      String    @db.VarChar(100)
  role         UserRole  @default(USER)
  is_active    Boolean   @default(true)
  last_login   DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  
  // Relations
  event_users  EventUser[]
  transport_reports TransportReport[]
  documents Document[]
  user_permissions UserPermission[]
  
  @@index([email])
  @@index([role])
  @@index([is_active])
}

// Define the permissions model for RBAC
model PermissionEntity {
  permission_id   Int        @id @default(autoincrement())
  name            Permission @unique
  description     String?    @db.Text
  created_at      DateTime   @default(now())
  
  // Relations
  user_permissions UserPermission[]
  role_permissions RolePermission[]
}

// Define the roles model for RBAC
model Role {
  role_id        Int        @id @default(autoincrement())
  name           String     @unique @db.VarChar(50)
  description    String?    @db.Text
  created_at     DateTime   @default(now())
  
  // Relations
  role_permissions RolePermission[]
}

// Define the role_permissions model (many-to-many relationship)
model RolePermission {
  role_id       Int
  permission_id Int
  role          Role             @relation(fields: [role_id], references: [role_id], onDelete: Cascade)
  permission    PermissionEntity @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)
  
  @@id([role_id, permission_id])
  @@index([role_id])
  @@index([permission_id])
}

// Define the user_permissions model (many-to-many relationship)
model UserPermission {
  user_id       Int
  permission_id Int
  user          User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  permission    PermissionEntity @relation(fields: [permission_id], references: [permission_id], onDelete: Cascade)
  
  @@id([user_id, permission_id])
  @@index([user_id])
  @@index([permission_id])
}

// Define the events model
model Event {
  event_id    Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  start_date  DateTime? @db.Date
  end_date    DateTime? @db.Date
  description String?   @db.Text
  created_at  DateTime  @default(now())
  event_users EventUser[]
  flets       Flet[]
  hotels      Hotel[]
  destinations Destination[]
  flight_schedules FlightSchedule[]
  transport_reports TransportReport[]
  realtime_statuses RealTimeStatus[]
  documents Document[]
}

// Define the event_users model (many-to-many relationship)
model EventUser {
  event_id  Int
  user_id   Int
  event     Event @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  user      User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  @@id([event_id, user_id])
  @@index([event_id])
  @@index([user_id])
}

// Define the flet model (transport markers)
model Flet {
  flet_id     Int      @id @default(autoincrement())
  event_id    Int
  event       Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  name        String   @db.VarChar(255)
  description String?  @db.Text
  created_at  DateTime @default(now())
  @@index([event_id])
}

// Define the hotel model
model Hotel {
  hotel_id    Int      @id @default(autoincrement())
  event_id    Int
  event       Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  name        String   @db.VarChar(255)
  description String?  @db.Text
  created_at  DateTime @default(now())
  @@index([event_id])
}

// Define the destination model
model Destination {
  destination_id Int      @id @default(autoincrement())
  event_id       Int
  event          Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  name           String   @db.VarChar(255)
  description    String?  @db.Text
  created_at     DateTime @default(now())
  @@index([event_id])
}

// Define the flight_schedule model
model FlightSchedule {
  flight_id                   Int      @id @default(autoincrement())
  event_id                    Int
  event                       Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  first_name                  String   @db.VarChar(255)
  last_name                   String   @db.VarChar(255)
  flight_number               String   @db.VarChar(50)
  arrival_time                DateTime
  property_name               String   @db.VarChar(255)
  vehicle_standby_arrival_time DateTime
  departure_time              DateTime
  vehicle_standby_departure_time DateTime
  status                      String   @default("pending") @db.VarChar(50)
  created_at                  DateTime @default(now())
  @@index([event_id])
  @@index([status])
}

// Define the transport_report model
model TransportReport {
  report_id    Int      @id @default(autoincrement())
  event_id     Int
  event        Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  user_id      Int
  user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  name         String   @db.VarChar(255)
  surname      String   @db.VarChar(255)
  email        String   @db.VarChar(255)
  report_date  DateTime
  tasks_completed String? @db.Text
  meetings_attended String? @db.Text
  issues_encountered String? @db.Text
  pending_tasks String? @db.Text
  support_notes String? @db.Text
  status       String   @default("pending") @db.VarChar(50)
  submitted_at DateTime @default(now())
  @@index([event_id])
  @@index([user_id])
}

// Define the realtime_status model
model RealTimeStatus {
  status_id    Int      @id @default(autoincrement())
  event_id     Int
  event        Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  vehicle_code String   @db.VarChar(50)
  hotel_name   String   @db.VarChar(255)
  destination  String   @db.VarChar(255)
  guest_name   String?  @db.VarChar(255)
  status       String   @default("dispatched") @db.VarChar(50)
  color        String   @default("green") @db.VarChar(20)
  updated_at   DateTime @default(now())
  @@index([event_id])
  @@index([status])
}

// Define the document model
model Document {
  document_id  Int      @id @default(autoincrement())
  event_id     Int
  event        Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade)
  name         String   @db.VarChar(255)
  original_name String  @db.VarChar(255)
  file_path    String   @db.Text
  file_size    Int
  mime_type    String   @db.VarChar(100)
  uploaded_by  Int
  user         User     @relation(fields: [uploaded_by], references: [user_id], onDelete: Cascade)
  created_at   DateTime @default(now())
  @@index([event_id])
  @@index([uploaded_by])
}